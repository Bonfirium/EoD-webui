const { PrivateKey, TransactionBuilder } = require('echojs-lib');
const { Apis } = require('echojs-ws');


const generate = () => {
	const WIDTH = 11;
	const HEIGHT = 11;

	const MONSTERS_COUNT = 1;

	const CHESTS_COUNT = 5;

	const EMPTY = 0;
	const POTENTIAL_ROOM = 1;
	const ROOM = 2;
	const WALL = 3;
	const PORTAL = 4;
	const TREASURE = 5;

	const D8_X = [1, 1, 0, -1, -1, -1, 0, 1];
	const D8_Y = [0, -1, -1, -1, 0, 1, 1, 1];
	const D8 = D8_X.map((dx, index) => ({ dx, dy: D8_Y[index] }));
	const D12_X = [2, 2, 1, 0, -1, -2, -2, -2, -1, 0, 1, 2];
	const D12_Y = [0, -1, -2, -2, -2, -1, 0, 1, 2, 2, 2, 1];
	const D12 = D12_X.map((dx, index) => ({ dx, dy: D12_Y[index] }));

	const inRange = (x, y) => x >= 0 && x < WIDTH && y >= 0 && y < HEIGHT;
	const comprehension = (count, map) =>
		new Array(count).fill(0).map((_, index) => map(index));
	const rand = (x) => Math.floor(Math.random() * x);

	const map = comprehension(WIDTH, () => comprehension(HEIGHT, () => EMPTY));
	const getVectorPoint = (x, y) => x + y * WIDTH;
	const xStart = rand(WIDTH);
	const yStart = rand(HEIGHT);
	map[xStart][yStart] = POTENTIAL_ROOM;
	const pool = [{ x: xStart, y: yStart }];

	while (pool.length) {
		const ind = rand(pool.length);
		const { x, y } = pool[ind];
		pool[ind] = pool[pool.length - 1];
		pool.pop();
		if (map[x][y] !== 1) continue;
		map[x][y] = ROOM;
		D8.forEach(({ dx, dy }) => {
			const x1 = x + dx;
			const y1 = y + dy;
			if (!inRange(x1, y1)) return;
			map[x1][y1] = WALL;
		});
		D12.forEach(({ dx, dy }) => {
			const x1 = x + dx;
			const y1 = y + dy;
			if (!inRange(x1, y1) || map[x1][y1] !== EMPTY) return;
			map[x1][y1] = POTENTIAL_ROOM;
			pool.push({ x: x1, y: y1 });
		});
	}

	const deadends = [];

	for (let x = 0; x < WIDTH; x++) {
		for (let y = 0; y < HEIGHT; y++) {
			if (map[x][y] !== ROOM) continue;
			let doorsCountGT1 = false;
			let isDeadend = true;
			for (let i = 0; i < 12; i++) {
				const x1 = x + D12_X[i];
				const y1 = y + D12_Y[i];
				if (!inRange(x1, y1) || ![ROOM, PORTAL].includes(map[x1][y1])) continue;
				if (doorsCountGT1) {
					isDeadend = false;
					break;
				}
				doorsCountGT1 = true;
			}
			if (!isDeadend || !doorsCountGT1) continue;
			deadends.push({ x, y });
			map[x][y] = PORTAL;
		}
	}

	const stepsToPortal = comprehension(WIDTH, () => comprehension(HEIGHT, () => -1));
	let prevQ = [];
	let q = [];
	let nextQ = [];
	let stepIndex = 1;
	let mainPortalPos = null;
	deadends.forEach(({ x, y }) => {
		stepsToPortal[x][y] = 0;
		q.push({ x, y });
	});
	while (true) {
		if (q.length === 0) {
			if (nextQ.length === 0) {
				mainPortalPos = prevQ[rand(prevQ.length)];
				break;
			}
			stepIndex++;
			q = nextQ;
			nextQ = [];
			prevQ = [];
		}
		const { x, y } = q.pop();
		prevQ.push({ x, y });
		D12.forEach(({ dx, dy }) => {
			const x1 = x + dx;
			const y1 = y + dy;
			if (!inRange(x1, y1) || map[x1][y1] !== ROOM) return;
			const cell = stepsToPortal[x1][y1];
			if (cell !== -1 && cell < stepIndex) return;
			nextQ.push({ x: x1, y: y1 });
			stepsToPortal[x1][y1] = stepIndex;
		});
	}

	map[mainPortalPos.x][mainPortalPos.y] = PORTAL;

	console.log(map);

	const rooms = [];
	for (let x = 0; x < WIDTH; x++) {
		for (let y = 0; y < HEIGHT; y++) {
			if (map[x][y] === ROOM) rooms.push({ x, y });
		}
	}

	const treasurePositions = comprehension(CHESTS_COUNT, () => {
		const randIndex = rand(rooms.length);
		const { x, y } = rooms[randIndex];
		rooms[randIndex] = rooms[rooms.length - 1];
		rooms.pop();
		return getVectorPoint(x, y);
	});

	const monstersPositions = comprehension(MONSTERS_COUNT, () => {
		const randIndex = rand(rooms.length);
		const { x, y } = rooms[randIndex];
		rooms[randIndex] = rooms[rooms.length - 1];
		rooms.pop();
		return getVectorPoint(x, y);
	});

	const vectorMap = [];
	for (let y = 0; y < HEIGHT; y++) {
	    for (let x = 0; x < WIDTH; x++) {
			if (map[x][y] === ROOM || map[x][y] === PORTAL) {
           	    vectorMap.push(getVectorPoint(x, y));
		   }
		}
		// console.log(str);
		// console.log(str);
	}

	console.log(vectorMap);
	console.log(monstersPositions);
	console.log(treasurePositions);

	return { map: vectorMap, monstersPositions, treasurePositions };
};

const deploy = async (operation, options, privateKey) => {

	const instance = Apis.instance(
		'wss://echo-devnet-node.pixelplex.io/ws',
		true,
		4000,
		{ enableCrypto: false },
	);

	await instance.init_promise;

	privateKey = PrivateKey.fromWif(privateKey);
	const tr = new TransactionBuilder();

	tr.add_type_operation(operation, options);

	await tr.set_required_fees(options.asset_id);
	tr.add_signer(privateKey);

	const res = await tr.broadcast();

	const resultId = res[0].trx.operation_results[0][1];
	const result = await Apis.instance().dbApi().exec('get_contract_result', [resultId]);

	const addressHex = result.exec_res.new_address.toString().slice(-32);
	const addressInt = `1.16.${parseInt(addressHex, 16)}`;
	console.log(addressHex);
	console.log(addressInt);
};

const privateKey = '5K5Xo4pKP8Wn5tivpJxEqVvD57XRokxkfHDercEkve7Am2QUKdo';
const registrar = '1.2.639';
const code = '60806040526003805463ffffffff191690556005805462ffffff60b860020a60ff0201191690553480156200003357600080fd5b5060405162001be938038062001be9833981016040818152825160058054630100000060b860020a031916336301000000021790556101008301825260018352600919602080850191909152600a1983850152600b1960608501526000196080850152600a60a0850152600b60c0850152600c60e08501529084019390810192910190601690620000c9906000906008620003cf565b50604080516101808101825260028152600819602082015260008381036001818101830b830b9484019490945280820b820b6060840152600019908101820b820b6080840152600c1960a084015260011960c0840152600960e08401528401810b810b61010083015283810b810b610120830152838301810b900b610140820152600d610160820152620001609190600c620003cf565b506200017784848464010000000062000181810204565b5050505062000490565b600554600090819063010000009004600160a060020a031633146200020757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f6f6e6c792061646d696e2063616e206164642064756e67656f6e730000000000604482015290519081900360640190fd5b50506003805461ffff808216600081815260026020526040812061ffff19909416600190920190921617909255905b84518160ff161015620002f0576001826000016000878460ff168151811015156200025d57fe5b60209081029190910181015161ffff168252810191909152604001600020805460ff191691151591909117905584516001830190869060ff8416908110620002a157fe5b60209081029091018101518254600181810185556000948552929093206010840401805461ffff9283166002600f909616959095026101000a9485029290940219909316179091550162000236565b5060005b600160ff821610156200035c578360ff8216600181106200031157fe5b60200201516002830160ff8316600181106200032957fe5b601091828204019190066002026101000a81548161ffff021916908361ffff1602179055508080600101915050620002f4565b5060005b600560ff82161015620003c8578260ff8216600581106200037d57fe5b60200201516003830160ff8316600581106200039557fe5b601091828204019190066002026101000a81548161ffff021916908361ffff160217905550808060010191505062000360565b5050505050565b6001830191839082156200045a5791602002820160005b838211156200042957835183826101000a81548160ff021916908360000b60ff1602179055509260200192600101602081600001049283019260010302620003e6565b8015620004585782816101000a81549060ff021916905560010160208160000104928301926001030262000429565b505b50620004689291506200046c565b5090565b6200048d91905b808211156200046857805460ff1916815560010162000473565b90565b61174980620004a06000396000f3006080604052600436106100765763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416621c7b7d811461007b5780631ca1841c146100a15780635a8e080f146100ce578063a15c98db1461016f578063b307b7e914610227578063d392d1ce1461031c575b600080fd5b34801561008757600080fd5b5061009f62ffffff6004351661ffff60243516610331565b005b3480156100ad57600080fd5b506100b661088f565b6040805162ffffff9092168252519081900360200190f35b3480156100da57600080fd5b506040805160206004803580820135838102808601850190965280855261009f95369593946024949385019291829185019084908082843750506040805160208181019092529598979681810196955093506001925084915083908082843750506040805160a081810190925294979695818101959450925060059150839083908082843750939650610c7095505050505050565b34801561017b57600080fd5b5061018c62ffffff60043516610e9a565b60405160ff85168152602080820190859080838360005b838110156101bb5781810151838201526020016101a3565b5050505090500183600160200280838360005b838110156101e65781810151838201526020016101ce565b5050505090500182600560200280838360005b838110156102115781810151838201526020016101f9565b5050505090500194505050505060405180910390f35b34801561023357600080fd5b5061024462ffffff60043516611093565b604051808060200185600160200280838360005b83811015610270578181015183820152602001610258565b5050505090500184600560200280838360005b8381101561029b578181015183820152602001610283565b5050505090500183600260200280838360005b838110156102c65781810151838201526020016102ae565b50505050905001828103825286818151815260200191508051906020019060200280838360005b838110156103055781810151838201526020016102ed565b505050509050019550505050505060405180910390f35b34801561032857600080fd5b506100b66113e5565b600080808080808080607961ffff8a1610610396576040805160e560020a62461bcd02815260206004820152601f60248201527f746869732063656c6c206973206f757473696465206f662064756e67656f6e00604482015290519081900360640190fd5b62ffffff8a166000908152600460209081526040808320600181015461ffff6101009091048116855260028452828520908e16855292839052922054919950975060ff161515610430576040805160e560020a62461bcd02815260206004820152601160248201527f746869732063656c6c2069732077616c6c000000000000000000000000000000604482015290519081900360640190fd5b61043a88336113f0565b9550600160ff8716109450846104535760018603610455565b855b9350600192506000600189015460ff16600481111561047057fe5b14156105a45760ff808716600090815260048a01602052604090205416156104e2576040805160e560020a62461bcd02815260206004820152601d60248201527f73746172742d706f736974696f6e20697320616c726561647920736574000000604482015290519081900360640190fd5b886007890160ff8616600181106104f557fe5b60108104919091018054600f9092166002026101000a61ffff81810219909316939092169190910291909117905560ff861660009081526004890160205260409020805460ff1916600190811790915591505b600260ff831610156105855760ff808316600090815260048a01602052604090205416151561057a5760009250610585565b600190910190610548565b821561059f576001888101805460ff191682805b02179055505b610883565b846105b05760026105b3565b60015b60048111156105be57fe5b600189015460ff1660048111156105d157fe5b14610626576040805160e560020a62461bcd02815260206004820152601360248201527f6974206973206e6f7420796f7572207475726e00000000000000000000000000604482015290519081900360640190fd5b33600090815260048901602052604090205460ff1615610690576040805160e560020a62461bcd02815260206004820152601760248201527f796f7520776173206d6f7665642074686973207475726e000000000000000000604482015290519081900360640190fd5b846106c6576007880160ff8516600181106106a757fe5b601091828204019190066002029054906101000a900461ffff166106f3565b6006880160ff8516600181106106d857fe5b601091828204019190066002029054906101000a900461ffff165b90506106ff818a61152f565b1515610755576040805160e560020a62461bcd02815260206004820152601d60248201527f63616e206e6f74206d6f766520746f207468697320706f736974696f6e000000604482015290519081900360640190fd5b84156107f257886006890160ff86166001811061076e57fe5b601091828204019190066002026101000a81548161ffff021916908361ffff160217905550600091505b600160ff831610156107d55760ff808316600090815260048a0160205260409020541615156107ca57600092506107d5565b600190910190610798565b821561059f576001808901805460029260ff199091169083610599565b886007890160ff86166001811061080557fe5b601091828204019190066002026101000a81548161ffff021916908361ffff160217905550600191505b600260ff8316101561086c5760ff808316600090815260048a016020526040902054161515610861576000925061086c565b60019091019061082f565b8215610883576001888101805460ff191690911790555b50505050505050505050565b600080600061089c611650565b60055462ffffff1660009081526004602090815260408083203384529182905282205490945060ff161561091a576040805160e560020a62461bcd02815260206004820152601060248201527f616c726561647920696e20717565756500000000000000000000000000000000604482015290519081900360640190fd5b336000818152602086905260409020805460ff1916600117905560055460028087019177010000000000000000000000000000000000000000000000900460ff1690811061096457fe5b018054600160a060020a039290921673ffffffffffffffffffffffffffffffffffffffff199092169190911790556005805460ff7701000000000000000000000000000000000000000000000080830482166001018216810277ff000000000000000000000000000000000000000000000019909316929092179283905562ffffff8316955091041660021415610c67576005805477ff000000000000000000000000000000000000000000000019169055600380546001868101805461ffff620100009485900481166101000262ffff001990921691909117909155925491909104909116600090815260026020908152604091829020825193810180546080938102860184019094526060850184815291938593840182828015610ad157602002820191906000526020600020906000905b82829054906101000a900461ffff1661ffff1681526020019060020190602082600101049283019260010382029150808411610a985790505b50505091835250506040805160208082019283905290920191906002840190600190826000855b82829054906101000a900461ffff1661ffff1681526020019060020190602082600101049283019260010382029150808411610af85750505092845250506040805160a081019182905260209093019291506003840190600590826000855b82829054906101000a900461ffff1661ffff1681526020019060020190602082600101049283019260010382029150808411610b575790505050505050815250509150600090505b600160ff82161015610c0757602082015160ff821660018110610bbe57fe5b60200201516006850160ff831660018110610bd557fe5b601091828204019190066002026101000a81548161ffff021916908361ffff1602179055508080600101915050610b9f565b60038054600161ffff620100008084048216929092018116820263ffff00001990931692909217928390558204811691161415610c4c576003805463ffff0000191690555b6005805462ffffff8082166001011662ffffff199091161790555b50909392505050565b600554600090819063010000009004600160a060020a03163314610cde576040805160e560020a62461bcd02815260206004820152601b60248201527f6f6e6c792061646d696e2063616e206164642064756e67656f6e730000000000604482015290519081900360640190fd5b50506003805461ffff808216600081815260026020526040812061ffff19909416600190920190921617909255905b84518160ff161015610dc3576001826000016000878460ff16815181101515610d3257fe5b60209081029190910181015161ffff168252810191909152604001600020805460ff191691151591909117905584516001830190869060ff8416908110610d7557fe5b60209081029091018101518254600181810185556000948552929093206010840401805461ffff9283166002600f909616959095026101000a94850292909402199093161790915501610d0d565b5060005b600160ff82161015610e2b578360ff821660018110610de257fe5b60200201516002830160ff831660018110610df957fe5b601091828204019190066002026101000a81548161ffff021916908361ffff1602179055508080600101915050610dc7565b5060005b600560ff82161015610e93578260ff821660058110610e4a57fe5b60200201516003830160ff831660058110610e6157fe5b601091828204019190066002026101000a81548161ffff021916908361ffff1602179055508080600101915050610e2f565b5050505050565b6000610ea461167d565b610eac61167d565b610eb461169c565b610ebc6116bb565b62ffffff8616600090815260046020819052604091829020825160c0810190935260018101549091839160ff1690811115610ef357fe5b6004811115610efe57fe5b81526001820154610100900461ffff1660208201526040805180820180835291909201919060028085019182845b8154600160a060020a03168152600190910190602001808311610f2c5750505091835250506040805160a081019182905260209092019190600584810191826000855b825461010083900a900460ff161515815260206001928301818104948501949093039092029101808411610f6f575050509284525050604080516020808201928390529093019291506006840190600190826000855b82829054906101000a900461ffff1661ffff1681526020019060020190602082600101049283019260010382029150808411610fc5575050509284525050604080516020808201928390529093019291506007840190600190826000855b82829054906101000a900461ffff1661ffff16815260200190600201906020826001010492830192600103820291508084116110235750505092909352505082519293505050600481111561107457fe5b9450806080015193508060a00151925080606001519150509193509193565b606061109d61167d565b6110a561169c565b6110ad611702565b6110b56116bb565b6110bd611650565b62ffffff8716600090815260046020819052604091829020825160c0810190935260018101549091839160ff16908111156110f457fe5b60048111156110ff57fe5b81526001820154610100900461ffff1660208201526040805180820180835291909201919060028085019182845b8154600160a060020a0316815260019091019060200180831161112d5750505091835250506040805160a081019182905260209092019190600584810191826000855b825461010083900a900460ff161515815260206001928301818104948501949093039092029101808411611170575050509284525050604080516020808201928390529093019291506006840190600190826000855b82829054906101000a900461ffff1661ffff16815260200190600201906020826001010492830192600103820291508084116111c6575050509284525050604080516020808201928390529093019291506007840190600190826000855b82829054906101000a900461ffff1661ffff168152602001906002019060208260010104928301926001038202915080841161122457505050929093525050505060208181015161ffff16600090815260028252604090819020815160018201805494850282016080908101909452606082018581529597509094919385938401828280156112fa57602002820191906000526020600020906000905b82829054906101000a900461ffff1661ffff16815260200190600201906020826001010492830192600103820291508084116112c15790505b50505091835250506040805160208082019283905290920191906002840190600190826000855b82829054906101000a900461ffff1661ffff16815260200190600201906020826001010492830192600103820291508084116113215750505092845250506040805160a081019182905260209093019291506003840190600590826000855b82829054906101000a900461ffff1661ffff1681526020019060020190602082600101049283019260010382029150808411611380579050505050919092525050815160208301516040938401519590930151909a9299509397509295509350505050565b60055462ffffff1690565b600160a060020a038116600090815260208390526040812054819060ff161515611489576040805160e560020a62461bcd028152602060048201526024808201527f706c61796572206973206e6f7420636f6e6e656374656420746f20746869732060448201527f67616d6500000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b5060005b600260ff821610156114d85782600160a060020a0316846002018260ff166002811015156114b757fe5b0154600160a060020a031614156114d057809150611528565b60010161148d565b6040805160e560020a62461bcd02815260206004820152601c60248201527f6e6f742061626c6520746f2067657420706c6179657220696e64657800000000604482015290519081900360640190fd5b5092915050565b6000600b61ffff8481168281069290819004918516818106919004848061155784870361157d565b915061156483860361157d565b9050611570828261159d565b9998505050505050505050565b6000808260000b121561159557816000039050611598565b50805b919050565b600060ff83161580156115b357508160ff166002145b156115c05750600161164a565b8260ff1660021480156115d4575060ff8216155b156115e15750600161164a565b8260ff1660011480156115f757508160ff166002145b156116045750600161164a565b8260ff16600214801561161a57508160ff166001145b156116275750600161164a565b60ff8316158015611639575060ff8216155b156116465750600161164a565b5060005b92915050565b60e0604051908101604052806060815260200161166b61167d565b815260200161167861169c565b905290565b6020604051908101604052806001906020820280388339509192915050565b60a0604051908101604052806005906020820280388339509192915050565b6040805161016081018252600080825260208201529081016116db611702565b81526020016116e861169c565b81526020016116f561167d565b815260200161167861167d565b604080518082018252906002908290803883395091929150505600a165627a7a7230582007c33986c862bf43ea20b57d61bdba823451f7a1f4ed2eb5edab0c92a85634390029';
const args = '00000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000002e0000000000000000000000000000000000000000000000000000000000000025000000000000000000000000000000000000000000000000000000000000005e000000000000000000000000000000000000000000000000000000000000004c00000000000000000000000000000000000000000000000000000000000000480000000000000000000000000000000000000000000000000000000000000032000000000000000000000000000000000000000000000000000000000000001700000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000005000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000001c000000000000000000000000000000000000000000000000000000000000001f0000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000002f000000000000000000000000000000000000000000000000000000000000003100000000000000000000000000000000000000000000000000000000000000330000000000000000000000000000000000000000000000000000000000000035000000000000000000000000000000000000000000000000000000000000003800000000000000000000000000000000000000000000000000000000000000460000000000000000000000000000000000000000000000000000000000000048000000000000000000000000000000000000000000000000000000000000004a000000000000000000000000000000000000000000000000000000000000004d000000000000000000000000000000000000000000000000000000000000004f0000000000000000000000000000000000000000000000000000000000000057000000000000000000000000000000000000000000000000000000000000005d000000000000000000000000000000000000000000000000000000000000005f0000000000000000000000000000000000000000000000000000000000000066000000000000000000000000000000000000000000000000000000000000006c0000000000000000000000000000000000000000000000000000000000000074';

const options = {
	registrar,
	// receiver,
	asset_id: '1.3.0',
	value: 0,
	gasPrice: 0,
	gas: 15000000,
	code: `${code}${args}`,
};

// deploy('contract', options, privateKey).then(() => { process.exit(0); }, () => { process.exit(1); });
generate();
